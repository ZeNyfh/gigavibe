options:
	gigacolour: skript color from hex "202225"
	trollcolour: skript color from hex "dcdcdc"
	zencolour: skript color from hex "001996"
	bot: testzen-bot

function toSeconds(timespan: timespan) :: number:
	set {_totaltime} to {_timespan}
	set {_totaltime} to "%{_totaltime}%" # have to set it to its self, it wont edit otherwise
	replace all "days" and "day" with "* 86400" in {_totaltime}
	replace all "hours" and "hour" with "* 3600" in {_totaltime} # checks for plural to not end up with "1s * 3600" or something similar
	replace all "minutes" and "minute" with "* 60" in {_totaltime}
	replace all "seconds" and "second" with "" in {_totaltime}
	replace all "and " and ", " with "+ " in {_totaltime}
	set {_totaltime} to evaluate expr "%{_totaltime}%"
	return {_totaltime} # if used within a loop, be sure to add the result to a variable

function AND(conditions: booleans) :: boolean:
	if {_conditions::*} contains false:
		return false
	return true
	
function OR(conditions: booleans) :: boolean:
	if {_conditions::*} contains true:
		return true
	return false

function createQuickEmbed(title:string,description:string) :: embedbuilder:
	if {_title} is not "":
		make embed:
			set title of embed to {_title}
			set description of embed to {_description}
			set color of embed to {@zencolour}
	else: #Inefficient but idk, i dont do skript -9382
		make embed:
			set description of embed to {_description}
			set color of embed to {@zencolour}
	return last embed

function helpMessage(string: string, u: user, g: guild) :: embedbuilder:
	set {_guild} to {_g}
	set {_g} to discord id of {_g}
	make embed:
		add "**Syntax**%nl%`<>` is a required argument, `[]` is an optional argument%nl%" to {_embed::*}
		loop all discord command:
			if {_string} contains discord command category of loop-value:
				add "**`&%loop-value%`** - %description of loop-value%" to {_embed::*}
			if size of {_embed::*} != 0:
				set color of embed to {@zencolour}
				set description of embed to join {_embed::*} with nl
				set title of embed to "%{_string}%"
				set thumbnail of embed to avatar of self member of bot named "%{_bot}%" in {_guild}
			else:
				set {_categories::*} to category of loop-value
				set color of embed to {@zencolour}
	return last embed

import:
	ch.njol.skript.log.SkriptLogger

discord command help [<string>]:
	prefixes: &
	category: general
	aliases: cmds
	description: Explains commands and their usage.
	executable in: guild
	trigger:
		loop all discord command:
			if "general" contains discord command category of loop-value:
				add "`%loop-value%`" to {_general::*}
				replace every "and " and "," in {_general::*} with "" 
			if "music" contains discord command category of loop-value:
				add "`%loop-value%`" to {_music::*}
				replace every "and " and "," in {_music::*} with "" 
			if "dj" contains discord command category of loop-value:
				add "`%loop-value%`" to {_dj::*}
				replace every "and " and "," in {_dj::*} with "" 
		make embed:
			set title of embed to "📔 `Commands`"
			add "Click the buttons to get more information on a group.%nl%" to {_l::*}
			add "**General**" to {_l::*}
			add "%{_general::*}%%nl%" to {_l::*}
			add "**Music**" to {_l::*}
			add "%{_music::*}%%nl%" to {_l::*}
			add "**DJ**" to {_l::*}
			add "%{_dj::*}%%nl%" to {_l::*}
			replace every "and " and "," in {_l::*} with ""
			set description of embed to join {_l::*} with nl
		send last embed to event-channel and store it in {embed}
		set {_row} to new buttons row
		add new button with id "general" with style secondary with content "General" to buttons of {_row}
		add new button with id "music" with style secondary with content "Music" to buttons of {_row}
		add new button with id "dj" with style secondary with content "DJ" to buttons of {_row}
		add row {_row} to message {embed}

on button click:
	if event-button is "general":
		edit {embed} to show helpMessage("📖 General", event-user, event-guild) and keep buttons
		defer the interaction
	if event-button is "music":
		edit {embed} to show helpMessage("🔊 Music", event-user, event-guild) and keep buttons
		defer the interaction
	if event-button is "dj":
		edit {embed} to show helpMessage("🎧 DJ", event-user, event-guild) and keep buttons
		defer the interaction

discord command play [<string>]:
	prefixes: &
	category: music
	aliases: p, youtube
	description: Plays songs or playlists from youtube.
	executable in: guild
	trigger:
		clear {ratelimit}
		if {ratelimit} is set:
			clear {ratelimit}
			send createQuickEmbed("","❌ `You are doing this command too quickly!`") to event-channel
			wait 0.2 seconds
			clear {ratelimit}
			exit
		set {ratelimit} to 1
		if arg 1 is not set:
			clear {ratelimit}
			send createQuickEmbed("","❌ `You need to specify a URL or a Youtube search term.`") to event-channel
			wait 0.2 seconds
			clear {ratelimit}
			exit
		set {_a} to voice channel of event-member in event-guild
		if {_a} is not set:
			clear {ratelimit}
			send createQuickEmbed("","❌ `You need to be in a voice channel to use this command.`") to event-channel
			wait 0.2 seconds
			clear {ratelimit}
			exit
		if arg-1 contains "http" or "https":
			if arg-1 does not contain "www.youtube.com/watch?v=" or "https://youtu.be/" or "http://youtu.be/":
				send createQuickEmbed("","❌ `Not a youtube link.`") to event-channel
				exit
			else:
				clear {ratelimit}
				connect event-bot to voice channel of event-member
				search in youtube for arg-1 and store it in {_searchresult::*}
				add {_searchresult::1} to {track::*}
				if {_searchresult::1} is not set:
					send createQuickEmbed("","❌ `No results were found.`") to event-channel
					wait 0.2 seconds
					clear {ratelimit}
					exit
				wait 1 second
				play {track::1} in event-guild
				set {unixtime} to unix timestamp of now
				clear {ratelimit}
				set {_current} to the track the bot is playing in the event-guild
				make embed:
					set {_thumbnail} to track thumbnail of {_searchresult::1}
					replace every "maxresdefault.jpg" in {_thumbnail} with "0.jpg"
					set thumbnail of embed to {_thumbnail} 
					set title of embed to "%{_searchresult::1}%"
					set title url of embed to track url of {_searchresult::1}
					set color of embed to {@zencolour}
					set footer of embed to "Executed by %discord name of event-member%##%discord tag of event-member%"
					add "Duration: `%track duration of {_searchresult::1}%`" to {_l::*}
					add "Channel: `%track author of {_searchresult::1}%`" to {_l::*}
					set description of embed to join {_l::*} with nl
				send last embed to event-channel
				clear {_searchresult::*}
				clear {track::1}
				set {musicchannel} to event-channel
				clear {ratelimit}
				exit
			if arg-1 contains "www.youtube.com/playlist?list=":
				clear {ratelimit}
				connect event-bot to voice channel of event-member
				search in youtube for arg-1 and store it in {_searchresult::*}
				add {_searchresult::*} to {track::*}
				wait 1 second
				play {_searchresult::*} in event-guild
				set {unixtime} to unix timestamp of now
				clear {finaltime}
				loop {_searchresult::*}:
					set {_ans} to toSeconds(track duration of loop-value)
					add {_ans} to {_time}
				set {_time} to "%{_time}% seconds" parsed as timespan
				make embed:
					set title of embed to "Added %size of {_searchresult::*}% tracks to the queue."
					set {_thumbnail} to track thumbnail of {_searchresult::1}
					replace every "maxresdefault.jpg" in {_thumbnail} with "0.jpg"
					set thumbnail of embed to {_thumbnail}
					set title url of embed to track url of {_searchresult::1}
					set title url of embed to arg-1
					set color of embed to {@zencolour}
					set footer of embed to "Executed by %discord name of event-member%##%discord tag of event-member%"
					add "Duration: `%{_time}%`" to {_l::*}
				set description of embed to join {_l::*} with nl
				send last embed to event-channel
				clear {totaltime}
				clear {_searchresult::*}
				clear {track::1}
				clear {ratelimit}
				set {musicchannel} to event-channel
				exit
		if arg-1 does not contain "www.youtube.com/playlist?list=" or "www.youtube.com/watch?v=" or "https://youtu.be/":
			search in youtube for arg-1 and store it in {_searchresult::*}
			add {_searchresult::1} to {track::*}
			if {_searchresult::1} is not set:
				send createQuickEmbed("","❌ `No results were found.`") to event-channel
				clear {ratelimit}
				exit
		if arg-1 does not contain "http" or "https":
			clear {ratelimit}
			search in youtube for arg-1 and store it in {_searchresult::*}
			add {_searchresult::1} to {track::*}
			wait 1 second
			play {track::1} in event-guild
			set {unixtime} to unix timestamp of now
			set {_current} to track the bot is playing in the event-guild
			make embed:
				set title of embed to "%{_searchresult::1}%"
				set {_thumbnail} to track thumbnail of {_searchresult::1}
				replace every "maxresdefault.jpg" in {_thumbnail} with "0.jpg"
				set title url of embed to track url of {_searchresult::1}
				set thumbnail of embed to {_thumbnail}
				set color of embed to {@zencolour}
				set footer of embed to "Executed by %discord name of event-member%##%discord tag of event-member%"
				add "Duration: `%track duration of {track::1}%`" to {_l::*}
				add "Channel: `%track author of {track::1}%`" to {_l::*}
				set description of embed to join {_l::*} with nl
			send last embed to event-channel
			clear {track::1}
			clear {ratelimit}
			set {musicchannel} to event-channel
			exit

discord command soundcloud [<string>]:
	prefixes: &
	category: music
	aliases: sc
	description: Plays a song from soundcloud.
	executable in: guild
	trigger:
		connect event-bot to voice channel of event-member
		search in soundcloud for arg-1 and store it in {_searchresult::*}
		add {_searchresult::1} to {track::*}
		if {track::1} is not set:
			send "no song was found" to event-channel
			exit
		make embed:
			set title of embed to "%{track::1}%"
			set thumbnail of embed to track thumbnail of {track::1}
			set title url of embed to track url of {track::1}
			set color of embed to {@zencolour}
			set footer of embed to "Executed by %discord name of event-member%##%discord tag of event-member%"
			add "Duration: `%track duration of {track::1}%`" to {_l::*}
			add "Channel: `%track author of {track::1}%`" to {_l::*}
			set description of embed to join {_l::*} with nl
		send last embed to event-channel
		wait 1 second
		play {track::1} in event-guild
		set {unixtime} to unix timestamp of now
		clear {ratelimit}
		clear {_searchresult::*}
		clear {track::1}
		set {musicchannel} to event-channel
		exit

discord command song [<text>]:
	executable in: guild
	category: music
	prefixes: &
	description: Plays a song from the server host's computer or a compatible link.
	trigger:
		if id of event-member is "211789389401948160":
			load locale track from arg-1 and store it in {_tracky}
			wait 1 second
			if {_tracky} is not set:
				send "file not found" to event-channel
			else:
				connect event-bot to voice channel of event-member
				play {_tracky} in event-guild

on track start seen by "azenyfh":
	set {unixtime} to unix timestamp of now
	wait 1 second
	set {_current} to the track the bot is playing in the event-guild
	make embed:
		set {_thumbnail} to track thumbnail of track the bot is playing in the event-guild
		replace every "maxresdefault.jpg" in {_thumbnail} with "0.jpg"
		set thumbnail of embed to {_thumbnail}
		set color of embed to {@zencolour}
		set title of embed to "**Now playing: %{_current}%**"
		set title url of embed to track url of {_current}
		add "Channel: `%track author of track the bot is playing in the event-guild%`%nl%" to {_l::*}
		add "Duration: `%track duration of track the bot is playing in the event-guild%`" to {_l::*}
		set description of embed to join {_l::*} with nl
	send last embed to {musicchannel}

on track end seen by "azenyfh":
	if bot is repeating in event-guild:
		exit
	if {track::1} is set:
		clear {track::1}
	wait 0.2 seconds
	play {track::1} in event-guild
	if {track::1} is not set:
		skip track of event-guild
	wait 1 minute
	if bot is not playing in event-guild:
		disconnect bot of event-guild

discord command loop:
	executable in: guild
	aliases: unloop
	category: music
	description: Loops or unloops the current track that is being played.
	prefixes: &
	trigger:
		if bot is repeating in event-guild:
			set repeating state of event-guild to no
			send "no longer looping" to event-channel
		else:
			set repeating state of event-guild to yes
			send "now looping" to event-channel

discord command join:
	description: Makes the bot join the voice channel.
	category: general
	prefixes: &
	executable in: guild
	trigger:
		connect event-bot to voice channel of event-member

discord command forceskip:
	description: Skips the current song.
	aliases: fs
	prefixes: &
	category: dj
	executable in: guild
	trigger:
		skip track of event-guild
		clear {track::1}
		wait 1 second
		if {track::1} is set:
			play {track::1} in event-guild

discord command exec <text>:
	prefixes: &
	description: Executes some skript code.
	category: dj
	trigger:
		eval arg-1 and store the errors in {_errors}
		if {_errors} is set:
			reply with "Error: %nl%```%{_errors}%```" # i am using reply here so that i can execute code in dms as well.

command /eval <text>:
	trigger:
		eval arg-1 and store the errors in {_errors}
		if {_errors} is set:
			send "Error: %nl%```%{_errors}%```" to console

discord command np:
	aliases: nowplaying
	description: Shows you what song is playing right now.
	prefixes: &
	category: general
	executable in: guild
	trigger:
		set {_current} to the track the bot is playing in the event-guild
		if {_current} is not set:
			send createQuickEmbed("","❌ `I am not playing anything.`") to event-channel
			exit
		set {totaltime} to toSeconds(track duration of track bot is playing in event-guild)
		set {tracktime} to toSeconds(track position of track event-bot is playing in event-guild)
		#set {_timeleft} to {totaltime} - {tracktime}
		set {_location} to 20-round( ({totaltime}-{tracktime})/{totaltime} * 20)
		if {_location} < 0:
			send "**an error has occurred**, location is less than 0 on this track. Report this here: https://www.github.com/ZeNyfh/gigavibe/issues" to event-channel
			exit
		set {_line} to "0▬1▬2▬3▬4▬5▬6▬7▬8▬9▬10▬11▬12▬13▬14▬15▬16▬17▬18▬19▬20"
		set {_linesplit::*} to {_line} split at "%{_location}%"
		set {_line} to "%{_linesplit::1}%🔘%{_linesplit::2}%"
		set {_temp} to concatenate {_linesplit::*}
		set {_line} to "%{_line}%%{_temp}%"
		replace every "0" and "1" and "2" and "3" and "4" and "5" and "6" and "7" and "8" and "9" with "" in {_line}
		replace every "<none>" with "" in {_line}
		set {_thumbnail} to track thumbnail of the track the bot is playing in the event-guild
		make embed:
			set color of embed to {@zencolour}
			set title of embed to "**%{_current}%**%nl%"
			set title url of embed to track url of {_current}
			add "`%{_line}%`%nl%" to {_l::*}
			replace every "maxresdefault.jpg" in {_thumbnail} with "0.jpg"
			set thumbnail of embed to {_thumbnail}
			set {_tracktime} to "%{tracktime}% seconds" parsed as timespan
			set {_tracktime} to "%{_tracktime}%"
			set {_duration} to "%track duration of {_current}%"
			add "Channel: `%track author of {_current}%`%nl%" to {_l::*}
			add "Duration: `%{_tracktime}% / %track duration of {_current}%`" to {_l::*}
			if bot is repeating in event-guild:
				add "%nl%🔄 `Looping`" to {_l::*}
			set description of embed to join {_l::*} with nl
		send last embed to event-channel
		clear {tracktime}
		clear {totaltime}

discord command queue:
	prefixes: &
	aliases: q
	category: music
	description: Shows you all of the songs the bot has queued.
	executable in: guild
	trigger:
		clear {finaltime}
		set {queue::*} to queue of event-guild
		set {_current} to the track the bot is playing in the event-guild
		if {_current} is not set:
			send createQuickEmbed("","❌ `There are no tracks in the queue.`") to event-channel
		else:
			set {_curfinaltime} to toSeconds(track duration of track the bot is playing in the event-guild)
			add {_curfinaltime} to {finaltime}
			if {queue::*} is set:
				loop {queue::*}:
					set {_finaltime} to toSeconds(track duration of loop-value)
					add {_finaltime} to {finaltime}
					add 1 to {_count}
			set {finaltime} to "%{finaltime}% seconds" parsed as timespan
			set {finaltime} to "%{finaltime}%"
			clear {_B::*}
			make embed:
				set {_thumbnail} to track thumbnail of the track the bot is playing in the event-guild
				set color of embed to {@zencolour}
				set footer of embed to "%{_count}% Songs queued | Length: %{finaltime}%"
				set {_B::1} to "**__Now playing__**: %nl%[**%the track the bot is playing in the event-guild%**](%track url of the track the bot is playing in the event-guild%)%nl%"
				set {_B::3} to "1. [%{queue::1}%](%track url of {queue::1}%)"
				set {_B::4} to "2. [%{queue::2}%](%track url of {queue::2}%)"
				set {_B::5} to "3. [%{queue::3}%](%track url of {queue::3}%)"
				set {_B::6} to "4. [%{queue::4}%](%track url of {queue::4}%)"
				set {_B::7} to "5. [%{queue::5}%](%track url of {queue::5}%)"
				replace every "maxresdefault.jpg" in {_thumbnail} with "0.jpg"
				set thumbnail of embed to {_thumbnail}
				set description of embed to join {_B::*} with nl
			send last embed to event-channel and store it in {queueembed}
			clear {finaltime}
			set {_row} to new buttons row
			add new button with id "queueforward" with style secondary with emoji "x" to buttons of {_row}
			add row {_row} to {queueembed}

discord command shuffle:
	prefixes: &
	category: music
	description: Shuffles the current queue.
	executable in: guild
	trigger:
		set {_current} to the track the bot is playing in the event-guild
		shuffle current queue of the event-guild
		set {track::*} to queue of event-guild
		stop current queue of event-guild
		wait 1 second
		play {track::*} in event-guild
		play {_current} in event-guild

on button click:
	if {_id} is "queueforward":
		add 1 to {queuenumber}
		make embed:
			set {_num} to evaluate expr "1*5+%{queuenumber}%"
			set color of embed to {@zencolour}
			set footer of embed to "Queue length: %{finaltime}%"
			set {_B::1} to "📝 `Queue`%nl%"
			set {_B::2} to "6. [%{queue::5}%](%track url of {queue::5}%)"
			set {_B::3} to "7. [%{queue::6}%](%track url of {queue::6}%)"
			set {_B::4} to "8. [%{queue::7}%](%track url of {queue::7}%)"
			set {_B::5} to "9. [%{queue::8}%](%track url of {queue::8}%)"
			set {_B::6} to "10. [%{queue::9}%](%track url of {queue::9}%)"
			set description of embed to join {_B::*} with nl

on voice leave:
	set {_sm} to self member of bot named "azenyfh" in event-guild
	if event-member is not {_sm}:
		wait 1 minute
		set {_members::*} to audio members of voice channel of {_sm}
		if OR(check [size of {_members::*} = 1], check [{_members::1} is not set]) = true:
			disconnect bot of event-guild
	else:
		stop current queue of event-guild

discord command ping:
	prefixes: &
	executable in: guild
	category: general
	description: Shows you the bot's ping.
	trigger:
		set {_unixtime} to unix timestamp of now
		send message "." to event-channel and store it in {_temp}
		set {_unixtime2} to unix timestamp of now
		destroy discord entity {_temp}
		subtract {_unixtime} from {_unixtime2}
		send "ping: %{_unixtime2}*1000%ms" to event-channel

discord command todo [<text>]:
	prefixes: &
	executable in: guild
	category: DJ
	description: Shows you what needs to be done or adds something to that list.
	trigger:
		if arg-1 is not set:
			loop {todo::*}:
				if loop-value is not set:
					reply with "%loop-value%"
					clear {todo::loop-index}
			send createQuickEmbed("","%{todo::*}%") to event-channel
			exit
		if arg-1 is a number:
			delete {todo::%arg-1%}
			send createQuickEmbed("","✅ removed it from the list of to-dos!") to event-channel
		add "%nl%%arg-1%" to {todo::*}
		send createQuickEmbed("","✅ added it to the list of to-dos!") to event-channel

command /uptime:
	trigger:
		set {_uptime} to uptime of bot named "azenyfh"
		send "%{_uptime}%" to console

discord command uptime:
	category: general
	description: Shows you how long the bot has been online for.
	prefixes: &
	executable in: guild
	trigger:
		set {_uptime} to uptime of bot named "azenyfh"
		send createQuickEmbed("","⏰  %{_uptime}%") to event-channel

on load:
	set presence of bot "azenyfh" to playing "&todo"

command /start:
	trigger:
		make new bot:
			enable all default intents
			login to {azenyfh} with name "azenyfh"
		wait 1 second
		set presence of {b} to playing "&todo"
		execute console command "save-all"
		set {b} to random bot of loaded bots
		send "Loaded up." to console
		set presence of {b} to playing "&todo"